import torch
import torch.nn as nn
from models.aggregators.aggregator import PredictionAggregator
from models.library.blocks import *
# from models.library.RasterSampler import *
from typing import Dict, Tuple
# from models.library.blocks import TransposeCNNBlock


class HomeAggregator(PredictionAggregator):
    """
    Aggregate context encoding home decoder, composed of multiple transposed convolution blocks.
    """

    def __init__(self, args: Dict):

        """
        args to include

        enc_size: int Dimension of encodings generated by encoder
        emb_size: int Size of embeddings used for queries, keys and values
        num_heads: int Number of attention heads

        """
        super().__init__()
        if args['backbone']=='resnet50':
            input_channel=2048+args['target_agent_enc_size']
        elif (args['backbone']=='resnet18' or args['backbone']=='resnet34'):
            input_channel=512+args['target_agent_enc_size']
        else:
            raise RuntimeError("The encoder should be a raster encoder!")
        interm_channel=int((input_channel+args['context_enc_size'])/2)
        self.dim_reduction_block=nn.Sequential(
            nn.Conv2d(input_channel, interm_channel, kernel_size=3, stride=1, padding=1, padding_mode='replicate'),
            nn.BatchNorm2d(interm_channel),
            nn.ReLU(),
            nn.Conv2d(interm_channel, args['context_enc_size'], kernel_size=3, stride=1, padding=1, padding_mode='replicate'),
            nn.BatchNorm2d(args['context_enc_size']),
            nn.ReLU()
        )
        self.concat=False

        

    def forward(self, encodings: Dict) -> torch.Tensor:
        """
        Forward pass for attention aggregator
        """
        
        target_agent_enc = encodings['target_agent_encoding']
        context_enc = encodings['context_encoding']
        if context_enc['combined'] is not None:
            combined_enc, map_mask = context_enc['combined'], context_enc['map_masks'].bool()
            if context_enc['traj_feature'] is not None:
                traj_feat=context_enc['traj_feature']
            if context_enc['map'] is not None:
                raster_map=context_enc['map']
                self.concat=True
        else:
            combined_enc, _ = self.get_combined_encodings(context_enc)
            

        augmented_target_agent_enc = target_agent_enc.unsqueeze(2).unsqueeze(3).repeat(1,1,combined_enc.shape[-2],combined_enc.shape[-1])
        concatenated_encodings=torch.cat([combined_enc,augmented_target_agent_enc],dim=1)
        op = self.dim_reduction_block(concatenated_encodings)##Fuse agent feat with map feat by compressing the dimension (actually is linear layer)
        if self.concat:
            op = torch.cat([op, raster_map], dim=1)

        outputs = {'agg_encoding': op,'under_sampled_mask': map_mask,'target_encodings':target_agent_enc,'traj_feature':traj_feat}
        torch.cuda.empty_cache()
        if encodings['gt_traj'] is not None:
            outputs['gt_traj']= encodings['gt_traj']
        return outputs

    @staticmethod
    def get_combined_encodings(context_enc: Dict) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Creates a combined set of map and surrounding agent encodings to be aggregated using attention.
        """
        encodings = []
        masks = []
        if 'map' in context_enc:
            encodings.append(context_enc['map'])
            masks.append(context_enc['map_masks'])
        if 'vehicles' in context_enc:
            encodings.append(context_enc['vehicles'])
            masks.append(context_enc['vehicle_masks'])
        if 'pedestrians' in context_enc:
            encodings.append(context_enc['pedestrians'])
            masks.append(context_enc['pedestrian_masks'])
        combined_enc = torch.cat(encodings, dim=1)
        combined_masks = torch.cat(masks, dim=1).bool()
        return combined_enc, combined_masks
