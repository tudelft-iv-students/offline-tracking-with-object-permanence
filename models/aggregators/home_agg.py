import torch
import torch.nn as nn
from models.aggregators.aggregator import PredictionAggregator
from models.library.cnnblocks import *
from typing import Dict, Tuple


class HomeAggregator(PredictionAggregator):
    """
    Aggregate context encoding home decoder, composed of multiple transposed convolution blocks.
    """

    def __init__(self, args: Dict):

        """
        args to include

        enc_size: int Dimension of encodings generated by encoder
        emb_size: int Size of embeddings used for queries, keys and values
        num_heads: int Number of attention heads

        """
        super().__init__()
        if args['backbone']=='resnet50':
            input_channel=2048+args['target_agent_enc_size']
        elif (args['backbone']=='resnet18' or args['backbone']=='resnet34'):
            input_channel=512+args['target_agent_enc_size']
        else:
            raise RuntimeError("The encoder should be a raster encoder!")
        interm_channel=int((input_channel+512)/2)
        self.dim_reduction_block=nn.Sequential(
            nn.Conv2d(input_channel, interm_channel, kernel_size=1, stride=1, bias=False),
            nn.BatchNorm2d(interm_channel),
            nn.ReLU(),
            nn.Conv2d(interm_channel, 512, kernel_size=1, stride=1, bias=False),
            nn.BatchNorm2d(512),
            nn.ReLU()
        )
        self._transpose_convs = nn.Sequential(
            TransposeCNNBlock(in_channels=512, out_channels=256, kernel_size=3, stride=2, padding=0, output_padding=1),
            TransposeCNNBlock(in_channels=256, out_channels=128, kernel_size=3, stride=2, output_padding=0),
            TransposeCNNBlock(in_channels=128, out_channels=64, kernel_size=3, stride=2, output_padding=0),
            TransposeCNNBlock(in_channels=64, out_channels=32, kernel_size=3, stride=2, output_padding=1)
        )

    def forward(self, encodings: Dict) -> torch.Tensor:
        """
        Forward pass for attention aggregator
        """
        target_agent_enc = encodings['target_agent_encoding']
        context_enc = encodings['context_encoding']
        if context_enc['combined'] is not None:
            combined_enc, combined_masks = context_enc['combined'], context_enc['combined_masks'].bool()
        else:
            combined_enc, combined_masks = self.get_combined_encodings(context_enc)

        query = self.query_emb(target_agent_enc).unsqueeze(0)
        keys = self.key_emb(combined_enc).permute(1, 0, 2)
        vals = self.val_emb(combined_enc).permute(1, 0, 2)
        op, _ = self.mha(query, keys, vals, key_padding_mask=combined_masks)
        op = op.squeeze(0)
        op = torch.cat((target_agent_enc, op), dim=-1)

        return op

    @staticmethod
    def get_combined_encodings(context_enc: Dict) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Creates a combined set of map and surrounding agent encodings to be aggregated using attention.
        """
        encodings = []
        masks = []
        if 'map' in context_enc:
            encodings.append(context_enc['map'])
            masks.append(context_enc['map_masks'])
        if 'vehicles' in context_enc:
            encodings.append(context_enc['vehicles'])
            masks.append(context_enc['vehicle_masks'])
        if 'pedestrians' in context_enc:
            encodings.append(context_enc['pedestrians'])
            masks.append(context_enc['pedestrian_masks'])
        combined_enc = torch.cat(encodings, dim=1)
        combined_masks = torch.cat(masks, dim=1).bool()
        return combined_enc, combined_masks
